---

- name: Compute node initialisation
  hosts: localhost
  become: yes
  vars:
    os_metadata: "{{ lookup('url', 'http://169.254.169.254/openstack/latest/meta_data.json') | from_json }}"
    server_node_ip: "{{ os_metadata.meta.k3s_server }}"
    enable_compute: "{{ os_metadata.meta.enable_compute | default(false) | bool }}"
    enable_resolv_conf: "{{ os_metadata.meta.enable_resolv_conf | default(false) | bool }}"
    enable_etc_hosts: "{{ os_metadata.meta.enable_etc_hosts | default(false) | bool }}"

    # TODO: "= role defaults" - could be moved to a vars_file: on play with similar precedence effects
    # this is a good example: common environment actually defines this (non-functional w/o compute groups), but role default is empty
    resolv_conf_nameservers: []

    nfs_client_mnt_point: "/mnt"
    nfs_client_mnt_options:
    nfs_client_mnt_state: mounted
    nfs_configurations:
    nfs_enable:
      clients: false
    nfs_enable:
      server: false
      clients: false

  tasks:
    - block:
        - name: Report skipping initialization if not compute node
          # meta: end_play produces no output
          debug:
            msg: "Skipping compute initialization: Metadata enable_compute is not true"
        
        - meta: end_play
      when: not enable_compute

    - name: Ensure the mount directory exists
      file:
        path: /mnt/cluster
        state: directory
        owner: root
        group: root
        mode: u=rwX,go= # is sensitive
    
    - name: Mount /mnt/cluster
      mount:
        path: /mnt/cluster
        src: "{{ server_node_ip }}:/exports/cluster"
        fstype: nfs
        opts: ro,sync
        state: mounted
      register: _mount_mnt_cluster
      ignore_errors: true
      # TODO: add some retries here?

    - block:
        - name: Report skipping initialization if cannot mount nfs
          # meta: end_play produces no output
          debug:
            msg: "Skipping compute initialization: Failed to mount /exports/cluster from control node {{ server_node_ip }}"
        
        - meta: end_play
      when: _mount_mnt_cluster.failed

    - name: Load hostvars from NFS
      # this is higher priority than vars block = normal ansible's hostvars
      include_vars:
        file: "/mnt/cluster/hostvars/{{ ansible_hostname }}/hostvars.yml" # can't use inventory_hostname

      # TODO: should /mnt/cluster now be UNMOUNTED to avoid future hang-ups?

    - name: Configure resolve.conf
      block:
        - name: Set nameservers in /etc/resolv.conf
          ansible.builtin.template:
            src: /etc/ansible-init/templates/resolv.conf.j2
            dest: /etc/resolv.conf
            owner: root
            group: root
            mode: u=rw,og=r

        - name: Disable NetworkManager control of resolv.conf
          ansible.builtin.copy:
            src: /etc/ansible-init/files/NetworkManager-dns-none.conf
            dest: /etc/NetworkManager/conf.d/90-dns-none.conf
            owner: root
            group: root
            mode: u=rw,og=r
          register: _copy_nm_config

        - name: Reload NetworkManager
          ansible.builtin.systemd:
            name: NetworkManager
            state: reloaded
          when: _copy_nm_config.changed | default(false)
      when: enable_resolv_conf

    - name: Copy cluster /etc/hosts
      copy:
        src: /mnt/cluster/hosts
        dest: /etc/hosts
        owner: root
        group: root
        mode: 0644
      when: enable_etc_hosts

    # TODO: - name: NFS client mount
    - name: If nfs-clients is present
      include_tasks: nfs-clients.yml
      when: nfs_enable.clients | bool or ('nfs_enable' in item and item.nfs_enable.clients | bool)
      loop: "{{ nfs_configurations }}"

    # TODO: - name: Manila mount

    # TODO: - name: Basic users setup

    # TODO: - name: Configure EESSI

    # TODO: - name: Configure openhpc
    # NB: don't need conditional block on enable_compute as have already exited
    # if not the case
    - name: Write Munge key
      copy:
        content: "{{ openhpc_munge_key }}"
        dest: "/etc/munge/munge.key"
        owner: munge
        group: munge
        mode: 0400

    - name: Set slurmctld location for configless operation
      lineinfile:
        path: /etc/sysconfig/slurmd
        line: "SLURMD_OPTIONS='--conf-server {{ groups['control'] | first }}'"
        regexp: "^SLURMD_OPTIONS="
        create: yes
        owner: root
        group: root
        mode: 0644

    - name: Ensure Munge service state
      service:
        name: munge
        enabled: true
        state: started

    - name: Ensure slurmd service state
      service:
        name: slurmd
        enabled: true
        state: started

    - name: Ensure node is resumed
      # TODO: consider if this is always safe for all job states?
      command: scontrol update state=resume nodename={{ ansible_hostname }}
